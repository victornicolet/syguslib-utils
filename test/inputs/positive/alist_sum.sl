(set-logic LIA)
(synth-fun join ((x1 Int) (x2 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x1 x2 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(declare-var x Int)
(declare-var i Int)
(declare-var i0 Int)
(declare-var i1 Int)
(constraint (= i1 (join i1 0)))
(constraint (= (ite (= x i) (+ i0 i1) i1) (join i1 (ite (= x i) (+ i0 0) 0))))
(check-synth)
